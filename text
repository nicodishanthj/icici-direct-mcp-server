PROJECT STRUCTURE:
==================
ccpinvcb-converter/
├── pom.xml
├── src/
│   └── main/
│       ├── java/
│       │   └── com/
│       │       └── mainframe/
│       │           └── converter/
│       │               ├── Main.java
│       │               ├── model/
│       │               │   └── CCPINVCBRecord.java
│       │               └── service/
│       │                   └── ProcessingService.java
│       └── resources/
│           ├── application.properties
│           └── sample-data.json
└── README.md

================================================================================
FILE: pom.xml
================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.mainframe.converter</groupId>
    <artifactId>ccpinvcb-converter</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    
    <dependencies>
        <!-- IBM JZOS for COBOL types -->
        <dependency>
            <groupId>com.ibm.jzos</groupId>
            <artifactId>ibmjzos</artifactId>
            <version>2.4.8</version>
        </dependency>
        
        <!-- Jackson for JSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.2</version>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.mainframe.converter.Main</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>

================================================================================
FILE: src/main/java/com/mainframe/converter/Main.java
================================================================================
package com.mainframe.converter;

import com.mainframe.converter.service.ProcessingService;
import com.mainframe.converter.model.CCPINVCBRecord;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.*;

public class Main {
    
    public static void main(String[] args) {
        try {
            if (args.length == 0) {
                printUsage();
                System.exit(1);
            }
            
            ProcessingService service = new ProcessingService();
            String command = args[0];
            
            switch (command) {
                case "process":
                    if (args.length < 3) {
                        System.out.println("Usage: process <input-file> <output-file>");
                        System.exit(1);
                    }
                    service.processFile(args[1], args[2]);
                    System.out.println("Processing completed: " + args[2]);
                    break;
                    
                case "sample":
                    generateSampleData();
                    break;
                    
                default:
                    System.out.println("Unknown command: " + command);
                    printUsage();
            }
            
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }
    
    private static void printUsage() {
        System.out.println("Usage: java -jar ccpinvcb-converter.jar <command> [options]");
        System.out.println("Commands:");
        System.out.println("  process <input> <output>  - Process COBOL file");
        System.out.println("  sample                    - Generate sample data");
    }
    
    private static void generateSampleData() throws IOException {
        CCPINVCBRecord sample = new CCPINVCBRecord();
        sample.setInventoryTimestamp("2024-01-15-14.30.45.123456");
        sample.setInventoryRerunFlag("N");
        sample.setTransactionId("TRX2024001");
        sample.setClientId("CLIENT0001");
        sample.setMailerId("MAILER001");
        sample.setFormType('E');
        sample.setAccountNumber("4532015112830366");
        
        ObjectMapper mapper = new ObjectMapper();
        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(sample);
        
        FileWriter writer = new FileWriter("sample-output.json");
        writer.write(json);
        writer.close();
        
        System.out.println("Sample data generated: sample-output.json");
    }
}

================================================================================
FILE: src/main/java/com/mainframe/converter/model/CCPINVCBRecord.java
================================================================================
package com.mainframe.converter.model;

import java.math.BigDecimal;

public class CCPINVCBRecord {
    
    // Main fields
    private String inventoryTimestamp;
    private String inventoryRerunFlag;
    
    // ControlBlock1
    private String transactionId;
    private String clientId;
    
    // ControlBlock2
    private String mailerId;
    private char formType;
    private String formId;
    private BigDecimal formWeight;
    
    // ControlBlock3
    private String providerId1;
    private String providerId2;
    private String providerId3;
    
    // ControlBlock4
    private String insertId;
    private String disclosureGroup;
    private String envelope;
    
    // ControlBlock5
    private String tsysProductCode;
    private String clientProductCode;
    private char accountType;
    private char mailCode;
    
    // ControlBlock6
    private String accountNumber;
    private String holdLocation;
    private String reissueCycle;
    private String fillerField;
    private String tippingColor;
    private String cardTypeIndicator;
    private BigDecimal formCount;
    private BigDecimal cardCount;
    
    // ControlBlock7
    private String disclosureForm;
    private String alternativeDisclosureForm;
    private String alternativeAddendum1;
    private String addendum1;
    private String addendum2;
    private String addendum3;
    private String addendum4;
    
    // Constructor
    public CCPINVCBRecord() {
        // Initialize with defaults
        this.formWeight = BigDecimal.ZERO;
        this.formCount = BigDecimal.ZERO;
        this.cardCount = BigDecimal.ZERO;
    }
    
    // Getters and Setters
    public String getInventoryTimestamp() {
        return inventoryTimestamp;
    }
    
    public void setInventoryTimestamp(String inventoryTimestamp) {
        this.inventoryTimestamp = inventoryTimestamp;
    }
    
    public String getInventoryRerunFlag() {
        return inventoryRerunFlag;
    }
    
    public void setInventoryRerunFlag(String inventoryRerunFlag) {
        this.inventoryRerunFlag = inventoryRerunFlag;
    }
    
    public String getTransactionId() {
        return transactionId;
    }
    
    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }
    
    public String getClientId() {
        return clientId;
    }
    
    public void setClientId(String clientId) {
        this.clientId = clientId;
    }
    
    public String getMailerId() {
        return mailerId;
    }
    
    public void setMailerId(String mailerId) {
        this.mailerId = mailerId;
    }
    
    public char getFormType() {
        return formType;
    }
    
    public void setFormType(char formType) {
        this.formType = formType;
    }
    
    public String getFormId() {
        return formId;
    }
    
    public void setFormId(String formId) {
        this.formId = formId;
    }
    
    public BigDecimal getFormWeight() {
        return formWeight;
    }
    
    public void setFormWeight(BigDecimal formWeight) {
        this.formWeight = formWeight;
    }
    
    public String getProviderId1() {
        return providerId1;
    }
    
    public void setProviderId1(String providerId1) {
        this.providerId1 = providerId1;
    }
    
    public String getProviderId2() {
        return providerId2;
    }
    
    public void setProviderId2(String providerId2) {
        this.providerId2 = providerId2;
    }
    
    public String getProviderId3() {
        return providerId3;
    }
    
    public void setProviderId3(String providerId3) {
        this.providerId3 = providerId3;
    }
    
    public String getInsertId() {
        return insertId;
    }
    
    public void setInsertId(String insertId) {
        this.insertId = insertId;
    }
    
    public String getDisclosureGroup() {
        return disclosureGroup;
    }
    
    public void setDisclosureGroup(String disclosureGroup) {
        this.disclosureGroup = disclosureGroup;
    }
    
    public String getEnvelope() {
        return envelope;
    }
    
    public void setEnvelope(String envelope) {
        this.envelope = envelope;
    }
    
    public String getTsysProductCode() {
        return tsysProductCode;
    }
    
    public void setTsysProductCode(String tsysProductCode) {
        this.tsysProductCode = tsysProductCode;
    }
    
    public String getClientProductCode() {
        return clientProductCode;
    }
    
    public void setClientProductCode(String clientProductCode) {
        this.clientProductCode = clientProductCode;
    }
    
    public char getAccountType() {
        return accountType;
    }
    
    public void setAccountType(char accountType) {
        this.accountType = accountType;
    }
    
    public char getMailCode() {
        return mailCode;
    }
    
    public void setMailCode(char mailCode) {
        this.mailCode = mailCode;
    }
    
    public String getAccountNumber() {
        return accountNumber;
    }
    
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }
    
    public String getHoldLocation() {
        return holdLocation;
    }
    
    public void setHoldLocation(String holdLocation) {
        this.holdLocation = holdLocation;
    }
    
    public String getReissueCycle() {
        return reissueCycle;
    }
    
    public void setReissueCycle(String reissueCycle) {
        this.reissueCycle = reissueCycle;
    }
    
    public String getFillerField() {
        return fillerField;
    }
    
    public void setFillerField(String fillerField) {
        this.fillerField = fillerField;
    }
    
    public String getTippingColor() {
        return tippingColor;
    }
    
    public void setTippingColor(String tippingColor) {
        this.tippingColor = tippingColor;
    }
    
    public String getCardTypeIndicator() {
        return cardTypeIndicator;
    }
    
    public void setCardTypeIndicator(String cardTypeIndicator) {
        this.cardTypeIndicator = cardTypeIndicator;
    }
    
    public BigDecimal getFormCount() {
        return formCount;
    }
    
    public void setFormCount(BigDecimal formCount) {
        this.formCount = formCount;
    }
    
    public BigDecimal getCardCount() {
        return cardCount;
    }
    
    public void setCardCount(BigDecimal cardCount) {
        this.cardCount = cardCount;
    }
    
    public String getDisclosureForm() {
        return disclosureForm;
    }
    
    public void setDisclosureForm(String disclosureForm) {
        this.disclosureForm = disclosureForm;
    }
    
    public String getAlternativeDisclosureForm() {
        return alternativeDisclosureForm;
    }
    
    public void setAlternativeDisclosureForm(String alternativeDisclosureForm) {
        this.alternativeDisclosureForm = alternativeDisclosureForm;
    }
    
    public String getAlternativeAddendum1() {
        return alternativeAddendum1;
    }
    
    public void setAlternativeAddendum1(String alternativeAddendum1) {
        this.alternativeAddendum1 = alternativeAddendum1;
    }
    
    public String getAddendum1() {
        return addendum1;
    }
    
    public void setAddendum1(String addendum1) {
        this.addendum1 = addendum1;
    }
    
    public String getAddendum2() {
        return addendum2;
    }
    
    public void setAddendum2(String addendum2) {
        this.addendum2 = addendum2;
    }
    
    public String getAddendum3() {
        return addendum3;
    }
    
    public void setAddendum3(String addendum3) {
        this.addendum3 = addendum3;
    }
    
    public String getAddendum4() {
        return addendum4;
    }
    
    public void setAddendum4(String addendum4) {
        this.addendum4 = addendum4;
    }
}

================================================================================
FILE: src/main/java/com/mainframe/converter/service/ProcessingService.java
================================================================================
package com.mainframe.converter.service;

import com.ibm.jzos.fields.*;
import com.mainframe.converter.model.CCPINVCBRecord;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.*;
import java.math.BigDecimal;
import java.nio.charset.Charset;

public class ProcessingService {
    
    private static final Charset EBCDIC = Charset.forName("IBM-1047");
    private static final int RECORD_LENGTH = 300; // Approximate record length
    
    // IBM JZOS Field Definitions
    private final StringField timestampField = new StringField(26, EBCDIC);
    private final StringField flagField = new StringField(1, EBCDIC);
    private final StringField idField = new StringField(10, EBCDIC);
    private final StringField nameField = new StringField(30, EBCDIC);
    private final StringField accountField = new StringField(19, EBCDIC);
    private final PackedDecimalField amountField = new PackedDecimalField(7, 2, true);
    
    public void processFile(String inputPath, String outputPath) throws IOException {
        File inputFile = new File(inputPath);
        File outputFile = new File(outputPath);
        
        ObjectMapper mapper = new ObjectMapper();
        FileWriter writer = new FileWriter(outputFile);
        writer.write("[\n");
        
        try (RandomAccessFile input = new RandomAccessFile(inputFile, "r")) {
            byte[] recordBuffer = new byte[RECORD_LENGTH];
            boolean firstRecord = true;
            
            while (input.read(recordBuffer) != -1) {
                CCPINVCBRecord record = parseRecord(recordBuffer);
                
                if (!firstRecord) {
                    writer.write(",\n");
                }
                
                String json = mapper.writerWithDefaultPrettyPrinter()
                                   .writeValueAsString(record);
                writer.write(json);
                firstRecord = false;
            }
        }
        
        writer.write("\n]");
        writer.close();
    }
    
    private CCPINVCBRecord parseRecord(byte[] data) {
        CCPINVCBRecord record = new CCPINVCBRecord();
        int offset = 0;
        
        // Parse main fields
        record.setInventoryTimestamp(extractString(data, offset, 26));
        offset += 26;
        record.setInventoryRerunFlag(extractString(data, offset, 1));
        offset += 1;
        
        // Parse ControlBlock1
        record.setTransactionId(extractString(data, offset, 10));
        offset += 10;
        record.setClientId(extractString(data, offset, 10));
        offset += 10;
        
        // Parse ControlBlock2
        record.setMailerId(extractString(data, offset, 10));
        offset += 10;
        String formTypeStr = extractString(data, offset, 1);
        record.setFormType(formTypeStr.isEmpty() ? ' ' : formTypeStr.charAt(0));
        offset += 1;
        record.setFormId(extractString(data, offset, 10));
        offset += 10;
        record.setFormWeight(extractPackedDecimal(data, offset, 5, 2));
        offset += 3;
        
        // Parse ControlBlock3
        record.setProviderId1(extractString(data, offset, 10));
        offset += 10;
        record.setProviderId2(extractString(data, offset, 10));
        offset += 10;
        record.setProviderId3(extractString(data, offset, 10));
        offset += 10;
        
        // Parse ControlBlock4
        record.setInsertId(extractString(data, offset, 10));
        offset += 10;
        record.setDisclosureGroup(extractString(data, offset, 10));
        offset += 10;
        record.setEnvelope(extractString(data, offset, 10));
        offset += 10;
        
        // Parse ControlBlock5
        record.setTsysProductCode(extractString(data, offset, 10));
        offset += 10;
        record.setClientProductCode(extractString(data, offset, 10));
        offset += 10;
        String accountTypeStr = extractString(data, offset, 1);
        record.setAccountType(accountTypeStr.isEmpty() ? ' ' : accountTypeStr.charAt(0));
        offset += 1;
        String mailCodeStr = extractString(data, offset, 1);
        record.setMailCode(mailCodeStr.isEmpty() ? ' ' : mailCodeStr.charAt(0));
        offset += 1;
        
        // Parse ControlBlock6
        record.setAccountNumber(extractString(data, offset, 19));
        offset += 19;
        record.setHoldLocation(extractString(data, offset, 10));
        offset += 10;
        record.setReissueCycle(extractString(data, offset, 3));
        offset += 3;
        record.setFillerField(extractString(data, offset, 10));
        offset += 10;
        record.setTippingColor(extractString(data, offset, 10));
        offset += 10;
        record.setCardTypeIndicator(extractString(data, offset, 3));
        offset += 3;
        record.setFormCount(extractPackedDecimal(data, offset, 7, 0));
        offset += 4;
        record.setCardCount(extractPackedDecimal(data, offset, 7, 0));
        offset += 4;
        
        // Parse ControlBlock7
        record.setDisclosureForm(extractString(data, offset, 10));
        offset += 10;
        record.setAlternativeDisclosureForm(extractString(data, offset, 10));
        offset += 10;
        record.setAlternativeAddendum1(extractString(data, offset, 10));
        offset += 10;
        record.setAddendum1(extractString(data, offset, 10));
        offset += 10;
        record.setAddendum2(extractString(data, offset, 10));
        offset += 10;
        record.setAddendum3(extractString(data, offset, 10));
        offset += 10;
        record.setAddendum4(extractString(data, offset, 10));
        
        return record;
    }
    
    private String extractString(byte[] data, int offset, int length) {
        if (offset + length > data.length) {
            return "";
        }
        StringField field = new StringField(offset, length, EBCDIC);
        return field.getString(data).trim();
    }
    
    private BigDecimal extractPackedDecimal(byte[] data, int offset, int digits, int decimals) {
        if (offset + 4 > data.length) {
            return BigDecimal.ZERO;
        }
        try {
            PackedDecimalField field = new PackedDecimalField(offset, digits, decimals, true);
            return field.getBigDecimal(data);
        } catch (Exception e) {
            return BigDecimal.ZERO;
        }
    }
}

================================================================================
FILE: src/main/resources/application.properties
================================================================================
# Application Configuration
app.name=CCPINVCB Converter
app.version=1.0.0

# File Processing
file.encoding=IBM-1047
file.record.length=300
file.buffer.size=8192

# IBM JZOS Configuration
jzos.encoding=IBM-1047
jzos.packed.decimal.signed=true

================================================================================
FILE: src/main/resources/sample-data.json
================================================================================
{
  "inventoryTimestamp": "2024-01-15-14.30.45.123456",
  "inventoryRerunFlag": "N",
  "transactionId": "TRX2024001",
  "clientId": "CLIENT0001",
  "mailerId": "MAILER001",
  "formType": "E",
  "formId": "FORM123456",
  "formWeight": 125.50,
  "providerId1": "PROV001USA",
  "providerId2": "PROV002CAN",
  "providerId3": "PROV003MEX",
  "insertId": "INSERT0001",
  "disclosureGroup": "DISCGRP01",
  "envelope": "ENV9X12STD",
  "tsysProductCode": "TSYS123456",
  "clientProductCode": "CLNT789012",
  "accountType": "N",
  "mailCode": "N",
  "accountNumber": "4532015112830366",
  "holdLocation": "WAREHOUSE1",
  "reissueCycle": "001",
  "fillerField": "          ",
  "tippingColor": "GOLD      ",
  "cardTypeIndicator": "CHP",
  "formCount": 1,
  "cardCount": 2,
  "disclosureForm": "DISC001   ",
  "alternativeDisclosureForm": "ALTDISC001",
  "alternativeAddendum1": "ALTADD001 ",
  "addendum1": "ADDENDUM01",
  "addendum2": "ADDENDUM02",
  "addendum3": "ADDENDUM03",
  "addendum4": "ADDENDUM04"
}

================================================================================
FILE: README.md
================================================================================
# CCPINVCB Converter

Simple Java application to convert COBOL CCPINVCB copybook data to JSON using IBM JZOS.

## Build
```bash
mvn clean package
```

## Run
```bash
# Process COBOL file to JSON
java -jar target/ccpinvcb-converter-1.0.0.jar process input.dat output.json

# Generate sample data
java -jar target/ccpinvcb-converter-1.0.0.jar sample
```

## Files
- Main.java - Application entry point
- CCPINVCBRecord.java - Data model with getters/setters
- ProcessingService.java - IBM JZOS processing logic
- sample-data.json - Sample JSON data

================================================================================
HOW TO CREATE AND RUN THE PROJECT:
================================================================================

1. Create project directory:
   mkdir ccpinvcb-converter
   cd ccpinvcb-converter

2. Create directory structure:
   mkdir -p src/main/java/com/mainframe/converter/model
   mkdir -p src/main/java/com/mainframe/converter/service
   mkdir -p src/main/resources

3. Create all files as shown above in their respective directories

4. Build the project:
   mvn clean package

5. Run the application:
   java -jar target/ccpinvcb-converter-1.0.0.jar sample
   java -jar target/ccpinvcb-converter-1.0.0.jar process input.dat output.json

================================================================================
